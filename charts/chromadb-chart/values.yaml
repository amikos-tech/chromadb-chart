# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/chroma-core/chroma
  pullPolicy: IfNotPresent

# initContainer image
initImage: docker.io/httpd:2

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


service:
  type: ClusterIP  # ClusterIP, NodePort, LoadBalancer
  nodePort: null

ingress:
  enabled: false
  className: ""
  annotations: { }
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: { }

tolerations: [ ]

affinity: { }

podSpec:
  terminationGracePeriodSeconds: 5
  securityContext: { }
  podAnnotations: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  # fsGroup: 2000
  annotations: { }
  initContainers: [ ]
readinessProbe:
  failureThreshold: 20
  timeoutSeconds: 10
  periodSeconds: 5
livenessProbe:
  failureThreshold: 40
  timeoutSeconds: 10
  periodSeconds: 5
startupProbe:
  failureThreshold: 1000
  periodSeconds: 5
  initialDelaySeconds: 10

chromadb:
  allowReset: false
  isPersistent: true
  persistDirectory: /data
  logConfigFileLocation: /chroma/log_config.yaml
  logConfigMap: null
  logging:
    root: "INFO"
    chromadb: "DEBUG"
    uvicorn: "INFO"
  anonymizedTelemetry: false
  corsAllowOrigins: {} # as of version 1.0.x * is not allowed
  serverHost: "0.0.0.0"
  serverHttpPort: 8000
  maxPayloadSizeBytes: "41943040"
  data:
    volumeSize: "1Gi"
    storageClass: null
    accessModes: [ "ReadWriteOnce" ]
    retentionPolicyOnDelete: "Delete"
  telemetry:
    enabled: false
    endpoint: ""
    serviceName: "chroma"
  maintenance:
    collection_cache_policy: null # possible values: null or "LRU"
    collection_cache_limit_bytes: 1000000000 # defaults to 1GB. TODO: this must also observe limits if defined
  auth: # not working in 1.0.x
    enabled: true
    type: "token" # possible values: basic, token
    existingSecret: ""
    basic:
      username: "chroma"
      password: null  # The string used as the auth.basic password. Only used if value not null, otherwise a random string will be generated and used.
    token:
      headerType: "Authorization" #possible values Authorization, X-Chroma-Token
      value: null # The string used as the token (value). Only used if value not null, otherwise a random string will be generated and used.

